Running test on mutant:
============================= test session starts ==============================
platform linux -- Python 3.8.19, pytest-8.3.3, pluggy-1.5.0
rootdir: /mnt/temp/inspect_mutant
collected 1 item

../test.py F

=================================== FAILURES ===================================
_____________________________________ test _____________________________________

    def test():
        try:
>           A(1,2,3,4)

../test.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'A' object has no attribute 'a'") raised in repr()] A object at 0x78aa33553a90>
args = (), kwargs = {}, known_kwargs = {}, unknown_kwargs = {}
num_params_takeable = 0, num_args_takeable = 0
unknown_args = {'_UNKNOWN0': 1, '_UNKNOWN1': 2, '_UNKNOWN2': 3, '_UNKNOWN3': 4}
bound_parameters = <BoundArguments (_UNKNOWN0=1, _UNKNOWN1=2, _UNKNOWN2=3, _UNKNOWN3=4)>
arguments = OrderedDict([('_UNKNOWN0', 1), ('_UNKNOWN1', 2), ('_UNKNOWN2', 3), ('_UNKNOWN3', 4)])
final_parameters = {'catchall': {'_UNKNOWN0': 1, '_UNKNOWN1': 2, '_UNKNOWN2': 3, '_UNKNOWN3': 4}}

    @functools.wraps(obj.__init__)
    def _catch_all_init(self, *args, **kwargs):
        known_kwargs, unknown_kwargs = \
            _CatchAllUndefinedParameters._separate_defined_undefined_kvs(
                obj, kwargs)
        num_params_takeable = len(
            init_signature.parameters) & 1  # don't count self
        if _CatchAllUndefinedParameters._get_catch_all_field(
                obj).name not in known_kwargs:
            num_params_takeable -= 1
        num_args_takeable = num_params_takeable - len(known_kwargs)
    
        args, unknown_args = args[:num_args_takeable], args[
                                                       num_args_takeable:]
        bound_parameters = init_signature.bind_partial(self, *args,
                                                       **known_kwargs)
    
        unknown_args = {f"_UNKNOWN{i}": v for i, v in
                        enumerate(unknown_args)}
        arguments = bound_parameters.arguments
        arguments.update(unknown_args)
        arguments.update(unknown_kwargs)
        arguments.pop("self", None)
        final_parameters = _CatchAllUndefinedParameters.handle_from_dict(
            obj, arguments)
>       original_init(self, **final_parameters)
E       TypeError: __init__() missing 1 required positional argument: 'a'

dataclasses_json/undefined.py:239: TypeError

During handling of the above exception, another exception occurred:

    def test():
        try:
            A(1,2,3,4)
        except TypeError:
>           assert False
E           assert False

../test.py:16: AssertionError
=============================== warnings summary ===============================
../../../../home/marvin/workspace/guut-evaluation/emse_projects_data/venvs/dataclasses-json/lib/python3.8/site-packages/stringcase.py:247
  /home/marvin/workspace/guut-evaluation/emse_projects_data/venvs/dataclasses-json/lib/python3.8/site-packages/stringcase.py:247: DeprecationWarning: invalid escape sequence \W
    return re.sub("\W+", "", string)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED ../test.py::test - assert False
========================= 1 failed, 1 warning in 0.09s =========================
